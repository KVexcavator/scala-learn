Буквальные значения
-----------------------------------------
Числовые литералы

val i: Int = 123 // decimal
val x: Long = 0x123L // hexadecimal (291 decimal)
val f: Float = 123_456.789F // 123456.789
val d: Double = 123_456_789.0123 // 123456789.0123
val y: BigInt = 0x123_a4b // 1194571
val z: BigDecimal = 123_456_789.0123 // 123456789.0123

Scala позволяет использовать подчеркивания, чтобы сделать длинные числа более удобными для чтения. Они могут появляться в любом месте литерала (кроме между 0x), а не только между каждым третьим символом.
Шестнадцатеричные числа начинаются с 0x, за которыми следуют одна или несколько цифр и буквы от a до f и от A до F.
Укажите отрицательное число, добавив к литералу знак –.
Для литералов Long необходимо добавить символ L в конце литерала, если только вы не присваиваете значение переменной, объявленной как Long. В противном случае выводится Int. Строчные буквы l разрешены, но не рекомендуются, поскольку их легко ошибочно прочитать как число 1. Допустимые значения для целочисленного литерала ограничены типом переменной, которой будет присвоено значение. 

Литералы с плавающей точкой — это выражения с необязательным знаком минус, нулем или более цифр и подчеркиваниями, за которыми следует точка (.), за которой следует одна или более цифр. Для Float литералов добавьте символ F или f в конец литерала. В противном случае предполагается Double. Вы можете по желанию добавить D или d для Double.
Литералы с плавающей точкой могут быть выражены с экспонентами или без них. Формат экспоненциальной части — e или E, за которыми следует необязательный + или –, за которым следует одна или более цифр.

0.14 // leading 0 required
3.14, 3.14f, 3.14F, 3.14d, 3.14D
3e5, 3E5
3.14e+5, 3.14e-5, 3.14e-5f, 3.14e-5F, 3.14e-5d, 3.14e-5D

===============================================
Булевы литералы

scala> val (t, f) = (true, false)
val t: Boolean = true
val f: Boolean = false
===============================================
Символьные литералы
Символьный литерал — это либо печатный символ Unicode, либо escape-последовательность, записанная между одинарными кавычками.

A', '\u0041' // 'A' in Unicode
'\n', '\012' // '\n' in octal
'\t'
===============================================
Строковые литералы
Строковый литерал — это последовательность символов, заключенная в двойные кавычки или тройки двойных кавычек ("""…"""). Для строковых литералов в двойных кавычках разрешенные символы те же, что и для символьных литералов. Однако, если в строке появляется символ двойной кавычки ("), его необходимо экранировать с помощью символа \.

"Programming\nScala"
"He exclaimed, \"Scala is great!\""
"First\tSecond"

Строковые литералы в тройных кавычках поддерживают многострочные строки
"""Programming\nScala"""
"""He exclaimed, "Scala is great!""""
"""First line\n
Second line\t
Fourth line"""
"""^\s*(\d{4})-(\d{2})-(\d{2})\s+(\w*)\s*$"""

scala> "<hello> <world>".stripPrefix("<").stripSuffix(">")
val res0: String = hello> <world

==============================================
Символьные литералы
Scala поддерживает символы, которые являются интернированными строками, что означает, что два символа с одинаковой последовательностью символов фактически будут ссылаться на один и тот же объект в памяти. Синтаксис литерала Scala 2 для них использует начальную одинарную кавычку, 'mysymbol, но этот синтаксис устарел в Scala 3. Если вы хотите продолжать использовать этот синтаксис, используйте вместо этого импорт языка import language.deprecated.symbolLiterals или Symbol("mysymbol").
=============================================
Функциональные литералы
(i: Int, d: Double) => (i+d).toString — функциональный литерал.
Он имеет тип Function2[Int,Double,String], где последний тип — это возвращаемый тип.
Следующие объявления эквивалентны:
val f1: (Int, Double) => String = (i, d) => (i+d).toString
val f2: Function2[Int, Double, String] = (i, d) => (i+d).toString




