Traits: интерфейсы и миксины в Scala
Scala использует traits для определения абстракций. Упрощённо о них можно думать, как о интерфейсах для объявления абстрактных полей-членов, методов и типов с возможностью определения любого или всех из них.
Черты обеспечивают настоящее разделение интересов и композицию поведений (миксины). 

Вот типичная задача, добавление ведения журнала:

import util.Random

open class Service(name: String):
  def work(i: Int): (Int, Int) = (i, Random.between(0, 1000))
  
val service1 = new Service("one")
(1 to 3) foreach (i => println(s"Result: ${service1.work(i)}"))

* необязательное ключевое слово open, говорит о намерении расширить этот класс, создать подтипы от него

Вот перечисление для уровня ведения журнала и два свойства, одно из которых определяет абстракцию, а другое реализует абстракцию для ведения журнала в стандартный вывод:

enum Level:
  case Info, Warn, Error
  def ==(other: Level): Boolean = this.ordinal == other.ordinal
  def >=(other: Level): Boolean = this.ordinal >= other.ordinal
* ordinal порядковое

trait Logging:
  import Level.*

  def level: Level
  def log(level: Level, message: String): Unit

  final def info(message: String): Unit =
    if level >= Info then log(Info, message)
  final def warn(message: String): Unit =
    if level >= Warn then log(Warn, message)
  final def error(message: String): Unit =
    if level >= Error then log(Error, message)

trait StdoutLogging extends Logging:
  def log(level: Level, message: String) =
    println(s"${level.toString.toUpperCase}: $message")

Сервис, который «подмешивает» ведение журнала и использует его:

case class LoggedService(name: String, level: Level) extends Service(name) with StdoutLogging:
  override def work(i: Int): (Int, Int) =
    info(s"Starting work: i = $i")
    val result = super.work(i)
    info(s"Ending work: result = $result")
    result

// вызов
val service2 = LoggedService("two", Level.Info)
(1 to 3) foreach (i => println(s"Result: ${service2.work(i)}"))